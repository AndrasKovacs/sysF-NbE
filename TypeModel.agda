
{-# OPTIONS --without-K --type-in-type #-}

module TypeModel where

open import Lib
open import Type
open import Term

-- Universe
--------------------------------------------------------------------------------

-- todo: make Tyᴹ A return  *ᴹ A!

record Cand {Γ'} Γ A : Set where
  constructor con
  field
    S : Set
    Q : S → Nf {Γ'} Γ A
    U : Ne Γ A → S
open Cand public

*ᴹobjT : ∀ {Γ'}(A : Ty Γ') → Set
*ᴹobjT A = ∀ Δ' Δ σ' → Cand {Δ'} Δ (Tyₑ σ' A)

*ᴹmorphT : ∀ {Γ' A}(o : *ᴹobjT {Γ'} A) → Set
*ᴹmorphT o = ∀ {Δ' Δ σ' Σ'} Σ δ' (δ : OPE {Σ'}{Δ'} δ' Σ Δ) → o Δ' Δ σ' .S → o Σ' Σ (σ' ∘'ₑ δ') .S

record *ᴹ {Γ'} (A : Ty Γ') : Set where
  constructor con
  field
    obj   : *ᴹobjT A
    morph : *ᴹmorphT obj
open *ᴹ public

u* : ∀ {Γ'}(v : *∈ Γ') → *ᴹ {Γ'} (var v)
u* {Γ'} v =
  con (λ Δ' Δ σ' → con (Ne Δ (var (*∈ₑ σ' v))) ne (λ n → n))
      (λ {Δ'}{Δ}{σ'}{Σ'} Σ δ' δ n → coe ((Ne Σ ∘ var) & *∈-∘ₑ σ' δ' v) (Neₑ δ n))

coe-CandΓ :
  ∀ {Γ' Γ A₀ A₁}
    (A₂ : A₀ ≡ A₁)
  → (c : Cand {Γ'} Γ A₀) → coe (Cand Γ & A₂) c
  ≡ con (c .S) (λ x → coe (Nf Γ & A₂) (c .Q x)) (λ n → c .U (coe (Ne Γ & (A₂ ⁻¹)) n))
coe-CandΓ refl _ = refl

*ᴹₑ : ∀ {Γ' Δ' A}(σ' : OPE' Δ' Γ') → *ᴹ {Γ'} A → *ᴹ (Tyₑ σ' A)
*ᴹₑ {Γ'} {Δ'} {A} σ' (con obj morph) =
  con (λ Σ' Σ δ' → coe (Cand Σ & (Ty-∘ₑ σ' δ' A ⁻¹)) (obj Σ' Σ (σ' ∘'ₑ δ')) )
      (λ {Σ'}{Σ}{δ'}{Ξ'} Ξ ν' ν x →
         let p  = S & coe-CandΓ (Ty-∘ₑ σ' δ' A ⁻¹) (obj Σ' Σ (σ' ∘'ₑ δ'))
             q  = S & coe-CandΓ (Ty-∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹) (obj Ξ' Ξ (σ' ∘'ₑ δ' ∘'ₑ ν'))
             x' = coe p x
         in  coe ((λ x → obj Ξ' Ξ x .S) & ass'ₑ σ' δ' ν' ◾ q ⁻¹) (morph Ξ ν' ν x'))

*ᴹ-idₑ : ∀ {Γ' A} (Aᴹ : *ᴹ {Γ'} A) → *ᴹₑ id'ₑ Aᴹ ≅ Aᴹ
*ᴹ-idₑ {Γ'} {A} (con obj morph) = {!!}
  -- ap3̃ (λ A → *ᴹ.con {A = A})
  --   (Ty-idₑ A)
  --   ((ext̃ λ Σ' → ext̃ λ Σ → ext̃ λ σ' →
  --       uncoe (Cand Σ & (Ty-∘ₑ id'ₑ σ' A ⁻¹)) _
  --     ◾̃ ap̃ (obj Σ' Σ) (idl'ₑ σ')))
  --   (extĩ λ Σ' → extĩ λ Σ → extĩ λ δ' →
  --     extĩ λ Ξ' → ext̃ λ Ξ → ext̃ λ ν' → ext̃ λ ν
  --     → ext̃' (S & coe-CandΓ (Ty-∘ₑ id'ₑ δ' A ⁻¹) (obj Σ' Σ (id'ₑ ∘'ₑ δ'))
  --           ◾ (λ x → obj Σ' Σ x .S) & idl'ₑ δ')
  --     (λ x₀ x₁ x₂ →
  --       uncoe ((λ x₃ → obj Ξ' Ξ x₃ .S) & ass'ₑ id'ₑ δ' ν' ◾
  --              S & coe-CandΓ (Ty-∘ₑ id'ₑ (δ' ∘'ₑ ν') A ⁻¹)
  --             (obj Ξ' Ξ (id'ₑ ∘'ₑ δ' ∘'ₑ ν'))⁻¹) _
  --       ◾̃
  --       ap2̃ (λ σ' x → morph {σ' = σ'} Ξ ν' ν x) (idl'ₑ δ')
  --         (uncoe (S & coe-CandΓ (Ty-∘ₑ id'ₑ δ' A ⁻¹) _) x₀
  --         ◾̃ x₂)))

*ᴹ-∘ₑ :
  ∀ {Γ' Δ' Σ'}{A : Ty Γ'} (σ' : OPE' Δ' Γ') (δ' : OPE' Σ' Δ') (Aᴹ : *ᴹ {Γ'} A)
  → *ᴹₑ (σ' ∘'ₑ δ') Aᴹ ≅ *ᴹₑ δ' (*ᴹₑ σ' Aᴹ)
*ᴹ-∘ₑ {Γ'} {Δ'} {Σ'} {A} σ' δ' (con obj morph) = {!!}
  -- ap3̃ (λ A → *ᴹ.con {A = A})
  --   (Ty-∘ₑ σ' δ' A ⁻¹)
  --   (ext̃ λ Σ' → ext̃ λ Σ → ext̃ λ ν' →
  --       uncoe (Cand Σ & (Ty-∘ₑ (σ' ∘'ₑ δ') ν' A ⁻¹)) _
  --     ◾̃ ap̃ (obj Σ' Σ) (ass'ₑ σ' δ' ν')
  --     ◾̃ uncoe (Cand Σ & (Ty-∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹)) _ ⁻¹̃
  --     ◾̃ uncoe (Cand Σ & (Ty-∘ₑ δ' ν' (Tyₑ σ' A) ⁻¹)) _ ⁻¹̃)
  --   (extĩ λ Ω' → extĩ λ Ω → extĩ λ ν' → extĩ λ Ξ' →
  --    ext̃ λ Ξ → ext̃ λ ε' → ext̃ λ ε →
  --      ext̃'
  --        (ap2 (λ A → S {A = Tyₑ ν' A})
  --          (Ty-∘ₑ σ' δ' A ⁻¹)
  --          (  uncoe (Cand Ω & (Ty-∘ₑ (σ' ∘'ₑ δ') ν' A ⁻¹)) _
  --           ◾̃ ap̃ (obj Ω' Ω) (ass'ₑ σ' δ' ν')
  --           ◾̃ uncoe (Cand Ω & (Ty-∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹)) _ ⁻¹̃
  --           ◾̃ uncoe (Cand Ω & (Ty-∘ₑ δ' ν' (Tyₑ σ' A) ⁻¹)) _ ⁻¹̃))
  --        (λ x₀ x₁ x₂ →
  --           uncoe ((λ x → obj Ξ' Ξ x .S) & ass'ₑ (σ' ∘'ₑ δ') ν' ε' ◾
  --             S & coe-CandΓ (Ty-∘ₑ (σ' ∘'ₑ δ') (ν' ∘'ₑ ε') A ⁻¹)
  --             (obj Ξ' Ξ ((σ' ∘'ₑ δ') ∘'ₑ ν' ∘'ₑ ε')) ⁻¹) _
  --           ◾̃
  --           ap2̃ (λ σ'' x → morph {σ' = σ''} Ξ ε' ε x)
  --             (ass'ₑ σ' δ' ν')
  --             (  uncoe (S & coe-CandΓ (Ty-∘ₑ (σ' ∘'ₑ δ') ν' A ⁻¹)
  --                  (obj Ω' Ω ((σ' ∘'ₑ δ') ∘'ₑ ν'))) _
  --                ◾̃ x₂
  --                ◾̃ uncoe (S & coe-CandΓ (Ty-∘ₑ δ' ν' (Tyₑ σ' A) ⁻¹)
  --                     (coe (Cand Ω & (Ty-∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹))
  --                       (obj Ω' Ω (σ' ∘'ₑ δ' ∘'ₑ ν')))) _ ⁻¹̃
  --                ◾̃ uncoe (S & coe-CandΓ (Ty-∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹)
  --                   (obj Ω' Ω (σ' ∘'ₑ δ' ∘'ₑ ν'))) _ ⁻¹̃)
  --           ◾̃
  --           uncoe ((λ x → obj Ξ' Ξ x .S) & ass'ₑ σ' (δ' ∘'ₑ ν') ε' ◾
  --              S & coe-CandΓ (Ty-∘ₑ σ' ((δ' ∘'ₑ ν') ∘'ₑ ε') A ⁻¹)
  --              (obj Ξ' Ξ (σ' ∘'ₑ (δ' ∘'ₑ ν') ∘'ₑ ε')) ⁻¹) _ ⁻¹̃
  --           ◾̃
  --           uncoe ((λ x → coe (Cand Ξ & (Ty-∘ₑ σ' x A ⁻¹)) (obj Ξ' Ξ (σ' ∘'ₑ x)) .S) & ass'ₑ δ' ν' ε'
  --            ◾ S & coe-CandΓ (Ty-∘ₑ δ' (ν' ∘'ₑ ε') (Tyₑ σ' A) ⁻¹)
  --              (coe (Cand Ξ & (Ty-∘ₑ σ' (δ' ∘'ₑ ν' ∘'ₑ ε') A ⁻¹))
  --               (obj Ξ' Ξ (σ' ∘'ₑ δ' ∘'ₑ ν' ∘'ₑ ε')))⁻¹) _ ⁻¹̃))

-- Kind contexts
--------------------------------------------------------------------------------

data Con'ᴹ : (Γ' : Con') → ∀ {Δ'} → Sub' Δ' Γ' → Set where
  ∙   : ∀ {Δ'} → Con'ᴹ ∙ {Δ'} ∙
  _,_ : ∀ {Γ' Δ' σ' A} → Con'ᴹ Γ' {Δ'} σ' → *ᴹ A → Con'ᴹ (Γ' ,*) (σ' , A)

Con'ᴹₑ : ∀ {Γ' Δ' σ' Σ'} δ' → Con'ᴹ Γ' {Δ'} σ' → Con'ᴹ Γ' {Σ'} (σ' ₛ∘'ₑ δ')
Con'ᴹₑ δ' ∙          = ∙
Con'ᴹₑ δ' (σ'ᴹ , Aᴹ) = Con'ᴹₑ δ' σ'ᴹ , *ᴹₑ δ' Aᴹ

Con'ᴹ-idₑ : ∀ {Γ' Δ' σ'}(σ'ᴹ : Con'ᴹ Γ' {Δ'} σ') → Con'ᴹₑ id'ₑ σ'ᴹ ≅ σ'ᴹ
Con'ᴹ-idₑ ∙          = refl̃
Con'ᴹ-idₑ {Δ' = Δ'} (_,_ {Γ'} {σ' = σ'} {A} σ'ᴹ Aᴹ) =
  ap4̃ (λ σ' A σ'ᴹ Aᴹ → Con'ᴹ._,_ {σ' = σ'}{A = A} σ'ᴹ Aᴹ)
    (idr'ₛₑ σ')
    (Ty-idₑ A ~)
    (Con'ᴹ-idₑ σ'ᴹ)
    (*ᴹ-idₑ Aᴹ)

Con'ᴹ-∘ₑ :
  ∀ {Γ' Δ' Σ' Ξ' σ'} δ' (ν' : OPE' Ξ' Σ') σ'ᴹ
  → Con'ᴹₑ {Γ'}{Δ'}{σ'}{Ξ'} (δ' ∘'ₑ ν') σ'ᴹ ≅ Con'ᴹₑ ν' (Con'ᴹₑ δ' σ'ᴹ)
Con'ᴹ-∘ₑ δ' ν' ∙  = refl̃
Con'ᴹ-∘ₑ δ' ν' (_,_ {Γ'} {σ' = σ'} {A} σ'ᴹ Aᴹ) =
  ap4̃ (λ σ' A σ'ᴹ Aᴹ → Con'ᴹ._,_ {σ' = σ'}{A = A} σ'ᴹ Aᴹ)
    (ass'ₛₑₑ σ' δ' ν' ⁻¹)
    (Ty-∘ₑ δ' ν' A ⁻¹ ~)
    (Con'ᴹ-∘ₑ δ' ν' σ'ᴹ)
    (*ᴹ-∘ₑ δ' ν' Aᴹ)

-- Types
--------------------------------------------------------------------------------

*∈ᴹ : ∀ {Γ'}(v : *∈ Γ') → ∀ {Δ'} Δ (σ : Sub' Δ' Γ')(σᴹ : Con'ᴹ Γ' σ) → Cand Δ (*∈ₛ σ v)
*∈ᴹ vz     Δ (σ , A) (σᴹ , Aᴹ) = coe (Cand Δ & Ty-idₑ A) (Aᴹ .obj _ Δ id'ₑ)
*∈ᴹ (vs v) Δ (σ , _) (σᴹ , _ ) = *∈ᴹ v Δ σ σᴹ

*∈ᴹₑ :
  ∀ {Γ' v Δ' Δ σ' σ'ᴹ Σ' Σ δ'}(δ : OPE {Σ'}{Δ'} δ' Σ Δ)
  → *∈ᴹ {Γ'} v Δ σ' σ'ᴹ .S → *∈ᴹ v Σ _ (Con'ᴹₑ δ' σ'ᴹ) .S
*∈ᴹₑ {v = vz {Γ'}}{Δ'}{Δ}{σ' , A}{σ'ᴹ , x} {Σ'} {Σ} {δ'} δ aᴹ =

  coe ( ((λ y → obj x Σ' Σ y .S) & (idl'ₑ δ' ◾ idr'ₑ δ' ⁻¹))
      ◾ (S & coe-CandΓ (Ty-∘ₑ δ' id'ₑ A ⁻¹) _ ⁻¹)
      ◾ (S & coe-CandΓ (Ty-idₑ (Tyₑ δ' A)) _ ⁻¹))
      (x .morph {Δ'}{Δ}{id'ₑ} Σ δ' δ
        (coe (S & coe-CandΓ (Ty-idₑ A) _) aᴹ))

*∈ᴹₑ {v = vs v}{σ'ᴹ = σ'ᴹ , x} δ aᴹ = *∈ᴹₑ{v = v}{σ'ᴹ = σ'ᴹ} δ aᴹ


Tyᴹ : ∀ {Γ'}(A : Ty Γ') → ∀ {Δ'} Δ (σ' : Sub' Δ' Γ')(σ'ᴹ : Con'ᴹ Γ' σ') → Cand Δ (Tyₛ σ' A)
Tyᴹ (var v) σ' σ'ᴹ = *∈ᴹ v σ' σ'ᴹ

Tyᴹ {Γ'} (A ⇒ B) {Δ'} Δ σ' σ'ᴹ = con

  (∀ {Σ' Σ δ'}(δ : OPE {Σ'}{Δ'} δ' Σ Δ) → Tyᴹ A Σ _ (Con'ᴹₑ δ' σ'ᴹ) .S → Tyᴹ B Σ _ (Con'ᴹₑ δ' σ'ᴹ) .S)

  (λ fᴹ → lam
    (coe ((λ x → Nf (Δ , Tyₛ x A) (Tyₛ x B)) & idr'ₛₑ σ')
      (Tyᴹ B _ _ (Con'ᴹₑ id'ₑ σ'ᴹ) .Q
      (fᴹ (drop idₑ) (Tyᴹ A _ _ (Con'ᴹₑ id'ₑ σ'ᴹ) .U (var vz))))))

  (λ n {Σ'}{Σ}{δ'} δ aᴹ → let σ'ᴹ' = Con'ᴹₑ δ' σ'ᴹ in
    Tyᴹ B _ _ σ'ᴹ' .U (app (coe (Ne Σ & Ty-ₛ∘ₑ σ' δ' (A ⇒ B)) (Neₑ δ n)) (Tyᴹ A _ _ σ'ᴹ' .Q aᴹ)))

Tyᴹ {Γ'} (∀' A) {Δ'} Δ σ' σ'ᴹ = con
  (∀ {Σ' Σ δ'}(δ : OPE {Σ'}{Δ'} δ' Σ Δ) (B : Ty Σ')(Bᴹ : *ᴹ B) → Tyᴹ A Σ _ (Con'ᴹₑ δ' σ'ᴹ , Bᴹ) .S)

  (λ fᴹ →
    tlam (Tyᴹ A _ _ (Con'ᴹₑ (drop id'ₑ) σ'ᴹ , u* vz) .Q (fᴹ (drop' idₑ) _ (u* vz))))

  (λ n {Σ'}{Σ}{δ'} δ B Bᴹ →
    Tyᴹ A _ _ (Con'ᴹₑ δ' σ'ᴹ , Bᴹ) .U
      (coe
          (Ne Σ & (Ty-ₑ∘ₛ (keep δ') (id'ₛ , B) (Tyₛ (keep'ₛ σ') A)
        ◾ Ty-∘ₛ (keep'ₛ σ') ((δ' ₑ∘'ₛ id'ₛ) , B) A
        ◾ (λ x → Tyₛ (x , B) A) &
            (ass'ₛₑₛ σ' (drop id'ₑ) ((δ' ₑ∘'ₛ id'ₛ) , B)
           ◾ ((λ x → σ' ∘'ₛ id'ₑ ₑ∘'ₛ x) & idr'ₑₛ δ')
           ◾ (σ' ∘'ₛ_) & idl'ₑₛ (emb'ₑ δ')
           ◾ emb'-∘ₛ σ' δ')))
      (tappₙₑ (Neₑ δ n) B)))

Tyᴹₑ :
  ∀ {Γ'} A {Δ' Δ σ'} σ'ᴹ {Σ' Σ δ'}(δ : OPE {Σ'}{Δ'} δ' Σ Δ)
  → Tyᴹ {Γ'} A Δ σ' σ'ᴹ .S → Tyᴹ A Σ _ (Con'ᴹₑ δ' σ'ᴹ) .S
Tyᴹₑ (var v) σ'ᴹ δ aᴹ = *∈ᴹₑ {v = v} δ aᴹ

Tyᴹₑ {Γ'} (A ⇒ B) {σ' = σ'}  σ'ᴹ {δ' = δ'} δ tᴹ {Σ'} {Σ} {ν'} ν aᴹ =
  coe (ap2 (λ x y → Tyᴹ B Σ x y .S) (ass'ₛₑₑ σ' δ' ν' ⁻¹) (Con'ᴹ-∘ₑ δ' ν' σ'ᴹ))
    (tᴹ (δ ∘ₑ ν)
    (coe (ap2 (λ x y → Tyᴹ A Σ x y .S) (ass'ₛₑₑ σ' δ' ν') (Con'ᴹ-∘ₑ δ' ν' σ'ᴹ ⁻¹̃))
      aᴹ))

Tyᴹₑ (∀' A) {σ' = σ'} σ'ᴹ {δ' = δ'} δ tᴹ {Ξ'} {Ξ} {ν'} ν B Bᴹ =
  coe (ap2 (λ x y → Tyᴹ A Ξ x y .S) ((_, B) & (ass'ₛₑₑ σ' δ' ν' ⁻¹))
        (ap2̃ (λ σ' σ'ᴹ → Con'ᴹ._,_ {σ' = σ'} σ'ᴹ Bᴹ)
         (ass'ₛₑₑ σ' δ' ν' ⁻¹) (Con'ᴹ-∘ₑ δ' ν' σ'ᴹ)))
    (tᴹ (δ ∘ₑ ν) B Bᴹ)

Ty*ᴹ : ∀ {Γ'}(A : Ty Γ') → ∀ {Δ' σ'} (σ'ᴹ : Con'ᴹ Γ' {Δ'} σ') → *ᴹ (Tyₛ σ' A)
Ty*ᴹ {Γ'} A {Δ'} {σ'} σ'ᴹ = con
  (λ Δ' Δ δ' → coe (Cand Δ & (Ty-ₛ∘ₑ σ' δ' A ⁻¹)) (Tyᴹ A Δ _ (Con'ᴹₑ δ' σ'ᴹ)))
  (λ {Δ'}{Δ}{δ'}{Σ'} Σ ν' ν x →
    coe (ap2 (λ x y → Tyᴹ A Σ x y .S) (ass'ₛₑₑ σ' δ' ν') (Con'ᴹ-∘ₑ δ' ν' σ'ᴹ ⁻¹̃)
         ◾ S & (coe-CandΓ (Ty-ₛ∘ₑ σ' (δ' ∘'ₑ ν') A ⁻¹) _ ⁻¹))
      (Tyᴹₑ A (Con'ᴹₑ δ' σ'ᴹ) ν (coe (S & coe-CandΓ (Ty-ₛ∘ₑ σ' δ' A ⁻¹) _) x)))

-- Embeddings
--------------------------------------------------------------------------------

OPE'ᴹ : ∀ {Γ' Δ'}(σ' : OPE' Γ' Δ') → ∀ {Σ' δ'} → Con'ᴹ Γ' {Σ'} δ' → Con'ᴹ Δ' {Σ'} (σ' ₑ∘'ₛ δ')
OPE'ᴹ ∙         {Σ'}  δ'ᴹ       = δ'ᴹ
OPE'ᴹ (drop σ') {Σ'} (δ'ᴹ , _)  = OPE'ᴹ σ' δ'ᴹ
OPE'ᴹ (keep σ') {Σ'} (δ'ᴹ , Aᴹ) = OPE'ᴹ σ' δ'ᴹ , Aᴹ

OPE'ᴹ-id : ∀ {Γ' Δ' σ'}(σ'ᴹ : Con'ᴹ Γ' {Δ'} σ') → OPE'ᴹ id'ₑ σ'ᴹ ≅ σ'ᴹ
OPE'ᴹ-id ∙          = refl̃
OPE'ᴹ-id (_,_ {Γ'} {σ' = σ'} σ'ᴹ Aᴹ) =
  ap2̃ (λ σ' σ'ᴹ → Con'ᴹ._,_ {σ' = σ'} σ'ᴹ Aᴹ) (idl'ₑₛ σ') (OPE'ᴹ-id σ'ᴹ)

OPE'ᴹ-nat :
  ∀ {Γ' Δ' Σ' Ξ' σ'} (δ' : OPE' Δ' Γ') (ν' : OPE' Ξ' Σ') (σ'ᴹ : Con'ᴹ Δ' σ')
  → OPE'ᴹ δ' (Con'ᴹₑ ν' σ'ᴹ) ≅ Con'ᴹₑ ν' (OPE'ᴹ δ' σ'ᴹ)
OPE'ᴹ-nat ∙         ν' σ'ᴹ        = refl̃
OPE'ᴹ-nat (drop δ') ν' (σ'ᴹ , _)  = OPE'ᴹ-nat δ' ν' σ'ᴹ
OPE'ᴹ-nat (keep δ') ν' (σ'ᴹ , Aᴹ) =
  ap2̃ (λ σ' σ'ᴹ → Con'ᴹ._,_ {σ' = σ'} σ'ᴹ (*ᴹₑ ν' Aᴹ))
      (ass'ₑₛₑ δ' _ ν' ⁻¹) (OPE'ᴹ-nat δ' ν' σ'ᴹ)

*∈ₑᴹ :
  ∀ {Γ'} v {Δ' Σ'} Σ δ' {σ'} σ'ᴹ
  → *∈ᴹ {Δ'} (*∈ₑ {Γ'} δ' v) {Σ'} Σ σ' σ'ᴹ .S ≡ *∈ᴹ v Σ (δ' ₑ∘'ₛ σ') (OPE'ᴹ δ' σ'ᴹ) .S
*∈ₑᴹ v      Σ ∙         σ'ᴹ        = refl
*∈ₑᴹ v      Σ (drop δ') (σ'ᴹ , _ ) = *∈ₑᴹ v Σ δ' σ'ᴹ
*∈ₑᴹ vz     Σ (keep δ') (σ'ᴹ , Aᴹ) = refl
*∈ₑᴹ (vs v) Σ (keep δ') (σ'ᴹ , Aᴹ) = *∈ₑᴹ v Σ δ' σ'ᴹ

Tyₑᴹ :
  ∀ {Γ'} A {Δ' Σ'} Σ δ' {σ'} σ'ᴹ
  → Tyᴹ {Δ'} (Tyₑ {Γ'} δ' A) {Σ'} Σ σ' σ'ᴹ .S ≡ Tyᴹ A Σ (δ' ₑ∘'ₛ σ') (OPE'ᴹ δ' σ'ᴹ) .S
Tyₑᴹ {Γ'} (var v) {Δ'} {Σ'} Σ δ' {σ'} σ'ᴹ = *∈ₑᴹ v Σ δ' σ'ᴹ
Tyₑᴹ {Γ'} (A ⇒ B) {Δ'} {Σ'} Σ δ' {σ'} σ'ᴹ =
  Πi-≡ λ Ξ' → Πi-≡ λ Ξ → Πi-≡ λ ν' → Π-≡ λ ν →
    (λ x y → x → y)
      & (Tyₑᴹ A Ξ δ' (Con'ᴹₑ ν' σ'ᴹ)
        ◾ ap2 (λ x y → Tyᴹ A Ξ x y .S) (ass'ₑₛₑ δ' σ' ν' ⁻¹) (OPE'ᴹ-nat δ' ν' σ'ᴹ))
      ⊗ (Tyₑᴹ B Ξ δ' (Con'ᴹₑ ν' σ'ᴹ)
        ◾ ap2 (λ x y → Tyᴹ B Ξ x y .S) (ass'ₑₛₑ δ' σ' ν' ⁻¹) (OPE'ᴹ-nat δ' ν' σ'ᴹ))
Tyₑᴹ {Γ'} (∀' A)  {Δ'} {Σ'} Σ δ' {σ'} σ'ᴹ =
  Πi-≡ λ Ξ' → Πi-≡ λ Ξ → Πi-≡ λ ν' → Π-≡ λ ν → Π-≡ λ B → Π-≡ λ Bᴹ →
      Tyₑᴹ A Ξ (keep δ') (Con'ᴹₑ ν' σ'ᴹ , Bᴹ)
    ◾ ap2 (λ x y → Tyᴹ A Ξ (x , B) (y , Bᴹ) .S) (ass'ₑₛₑ δ' σ' ν' ⁻¹) (OPE'ᴹ-nat δ' ν' σ'ᴹ)

-- Substitutions
--------------------------------------------------------------------------------

Sub'ᴹ : ∀ {Γ' Δ'}(σ' : Sub' Γ' Δ') → ∀ {Σ' δ'} → Con'ᴹ Γ' {Σ'} δ' → Con'ᴹ Δ' {Σ'} (σ' ∘'ₛ δ')
Sub'ᴹ ∙        δ'ᴹ = ∙
Sub'ᴹ (σ' , A) δ'ᴹ = Sub'ᴹ σ' δ'ᴹ , Ty*ᴹ A δ'ᴹ

Sub'ᴹ-nat :
  ∀ {Γ' Δ' Σ' Ξ' σ'} (δ' : Sub' Δ' Γ') (ν' : OPE' Ξ' Σ') (σ'ᴹ : Con'ᴹ Δ' σ')
  → Sub'ᴹ δ' (Con'ᴹₑ ν' σ'ᴹ) ≅ Con'ᴹₑ ν' (Sub'ᴹ δ' σ'ᴹ)
Sub'ᴹ-nat ∙        ν' σ'ᴹ = refl̃
Sub'ᴹ-nat {σ' = σ'} (δ' , A) ν' σ'ᴹ =
  ap4̃ (λ σ' A → Con'ᴹ._,_ {σ' = σ'} {A = A})
    (ass'ₛₛₑ δ' σ' ν' ⁻¹)
    (Ty-ₛ∘ₑ σ' ν' A ⁻¹ ~)
    (Sub'ᴹ-nat δ' ν' σ'ᴹ)
    {!!}

Sub'ᴹ-id : ∀ {Γ' Δ' σ'}(σ'ᴹ : Con'ᴹ Γ' {Δ'} σ') → Sub'ᴹ id'ₛ σ'ᴹ ≅ σ'ᴹ
Sub'ᴹ-id ∙          = refl̃
Sub'ᴹ-id (_,_ {σ' = σ'} {A} σ'ᴹ Aᴹ) =
  ap3̃ {C = λ _ _ → *ᴹ A} (λ σ' x y → Con'ᴹ._,_ {σ' = σ'} x y)
  (ass'ₛₑₛ id'ₛ wk' (σ' , A) ◾ idl'ₛ (id'ₑ ₑ∘'ₛ σ') ◾ idl'ₑₛ σ')
  {!!} -- Sub'ᴹ-ₛ∘ₑ
  {!!}

*∈ₛᴹ :
  ∀ {Γ'} v {Δ' Σ'} Σ δ' {σ'} σ'ᴹ
  → Tyᴹ {Δ'} (*∈ₛ {Γ'} δ' v) {Σ'} Σ σ' σ'ᴹ .S ≡ *∈ᴹ v Σ (δ' ∘'ₛ σ') (Sub'ᴹ δ' σ'ᴹ) .S
*∈ₛᴹ vz {Σ' = Σ'} Σ (δ' , A) {σ'} σ'ᴹ =
     ap2 (λ x y → Tyᴹ A Σ x y .S) (idr'ₛₑ σ' ⁻¹) (Con'ᴹ-idₑ σ'ᴹ ⁻¹̃)
   ◾ S & coe-CandΓ (Ty-ₛ∘ₑ σ' id'ₑ A ⁻¹) _ ⁻¹
   ◾ S & coe-CandΓ (Ty-idₑ (Tyₛ σ' A)) _ ⁻¹
*∈ₛᴹ (vs v) Σ (δ' , A) σ'ᴹ = *∈ₛᴹ v Σ δ' σ'ᴹ

Tyₛᴹ :
  ∀ {Γ'} A {Δ' Σ'} Σ δ' {σ'} σ'ᴹ
  → Tyᴹ {Δ'} (Tyₛ {Γ'} δ' A) {Σ'} Σ σ' σ'ᴹ .S ≡ Tyᴹ A Σ (δ' ∘'ₛ σ') (Sub'ᴹ δ' σ'ᴹ) .S
Tyₛᴹ (var v) Σ δ' σ'ᴹ = *∈ₛᴹ v Σ δ' σ'ᴹ
Tyₛᴹ (A ⇒ B) Σ δ' {σ'} σ'ᴹ =
  Πi-≡ λ Ξ' → Πi-≡ λ Ξ → Πi-≡ λ ν' → Π-≡ λ ν →
    (λ x y → x → y)
      & (Tyₛᴹ A Ξ δ' (Con'ᴹₑ ν' σ'ᴹ)
        ◾ ap2 (λ x y → Tyᴹ A Ξ x y .S) (ass'ₛₛₑ δ' σ' ν' ⁻¹) (Sub'ᴹ-nat δ' ν' σ'ᴹ))
      ⊗ (Tyₛᴹ B Ξ δ' (Con'ᴹₑ ν' σ'ᴹ)
        ◾ ap2 (λ x y → Tyᴹ B Ξ x y .S) (ass'ₛₛₑ δ' σ' ν' ⁻¹) (Sub'ᴹ-nat δ' ν' σ'ᴹ))
Tyₛᴹ {Γ'} (∀' A) Σ δ' {σ'} σ'ᴹ =
  Πi-≡ λ Ξ' → Πi-≡ λ Ξ → Πi-≡ λ ν' → Π-≡ λ ν → Π-≡ λ B → Π-≡ λ Bᴹ →
    Tyₛᴹ A Ξ (keep'ₛ δ') (Con'ᴹₑ ν' σ'ᴹ , Bᴹ)
    ◾ ap3 (λ σ' σ'ᴹ Bᴹ → Tyᴹ A Ξ (σ' , B) (σ'ᴹ , Bᴹ) .S)
        (ass'ₛₑₛ δ' wk' (σ' ₛ∘'ₑ ν' , B) ◾ (δ' ∘'ₛ_) & idl'ₑₛ (σ' ₛ∘'ₑ ν') ◾ ass'ₛₛₑ δ' σ' ν' ⁻¹)
        {!!} -- Sub'ᴹ-ₛ∘ₑ
        {!!} -- lolz




